package com.atguigu.e;

public class WrittenExam {
 
	public static void main(String[] args) {

		//笔试题1
		int[] arr = new int[]{1,2,3};
		System.out.println(arr); //地址值
		
		char[] arr1 = new char[]{'a','b','c'};
		System.out.println(arr1); //abc
		//println(char[]) 其方法体遍历数组
		
	}

}



package com.atguigu.exer;
/*
 * 定义一个Circle类，包含一个double型的radius属性代表圆的半径
 * 一个findArea()方法返回值的面积
 */

public class Circle1 {

	double radius; //半径
	
	//求圆的面积
	public double findArea(){
		return Math.PI * radius * radius;
	}
	
}


package com.atguigu.exer;

public class PassObject {
	public static void main(String[] args){
		
	PassObject test = new PassObject();
	
	Circle1 c = new Circle1();
	
	test.printAreas(c, 5);
}	
	public void printAreas(Circle1 c,int time){
		
		System.out.println("Radius\t\tArea");
		
		// 设置圆的半径
		for(int i = 1;i <= time;i++){
			c.radius = i;
			double area = c.findArea();
			System.out.println(c.radius + "\t\t" + c.findArea());
		}
		 
	}

}


package com.atguigu.java;
/*
 *  自定义数组的工具
 */
public class ArraysUtil {
	
		//求数组的最大值
		public int getMax(int[] arr){
			int maxValue = arr[0];
			for(int i = 1;i < arr.length;i++){
				if(maxValue < arr[i]){
					maxValue = arr[i];
				}
			}
			return maxValue;
		}
		
		//求数组的最小值
		public int getMin(int[] arr){
			int minValue = arr[0];
			for(int i = 1;i < arr.length;i++){
				if(minValue > arr[i]){
					minValue = arr[i];
				}
			}
			return minValue;
		}
		
		//求数组的总和
		public int getSum(int[] arr){
			int sum = 0;
			for(int i = 0;i < arr.length;i++){
				sum += arr[i];
			}
			return sum;
		}
		
		//求数组的平均值
		public int getAvg(int[] arr){
			
			return getSum(arr) / arr.length;
			// 方法中调方法  getSum(arr)-数组总和，arr.length-数组长度
		}
		//反转数组
		public void reverse(int[] arr){
			for(int i = 0;i < arr.length / 2;i++){
				int temp = arr[i];
				arr[i] = arr[arr.length - i -1];
				arr[arr.length - i - 1] = temp;
			}

		}
		
		//复制数组
		public int[] copy(int[] arr){
			int[] arr1 = new int[arr.length];
			for(int i = 0;i < arr1.length;i++){
				arr1[i] = arr[i];
			}
			return arr1;
		}
		
		//数组排序
		public void sort(int[] arr){
			for(int i = 0;i < arr.length - 1;i++ ){
				for(int j = 0;j < arr.length - 1 -i;j++){
					if(arr[j] > arr[j + 1]){
//						int temp = arr[j];
//						arr[j] = arr[j + 1];
//						arr[j + 1] = temp;
						
//						swap(arr[j],arr[j + 1]); // 错误写法
						
						swap(arr , j , j + 1 );
					}
				}
			}
		}
		
		// 交换数组中指定两个位置元素的值
		/*
		public void swap(int i,int j){
			int temp = i;
			i = j;
			j = temp;
		}
		*/
		
		public void swap(int arr[],int i,int j){
			int temp = i;
			i = j;
			j = temp;
		}
		
		
		//遍历数组
		public void print(int[] arr){
			for(int i =0;i < arr.length;i++){
				System.out.print(arr[i] + "\t");
			}
			System.out.println();
		}
		
		//查找指定元素
		public int getIndex(int[] arr,int dest){
			for(int i = 0;i < arr.length;i++){
				if(dest == arr[i]){
					return i;
				}
			}
			return -1; //返回负数，表示没有找到
		}

	}


