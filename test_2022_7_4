package com.atguigu.e;
/*
 * 1. 定义： 在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。
 *      "两同一不同": 同一个类，相同方法名
 *                 参数列表不同，参数类型相同
 * 
 * 2. 举例：
 *      Arrays类型中重载的sort()/binarySearch()
 * 
 * 3. 判断是否是重载：
 *       跟方法的权限修饰符，返回值类型、形参变量名、方法体都没没有关系；
 *       
 * 4. 在通过对象调用方法时，如何确定某一个指定的方法：
 *       方法名---》 参数列表
*/
public class OverLoad {
	public static void main(String[] args){
		
		OverLoad test = new OverLoad();
		test.getSum(1, 2); //依次寻找与对象匹配的方法
	}
	
	//如下的四个方法构成重载
	public void getSum(int i,int j){
		System.out.println(i + j);
	} //方法名相同，参数类型不同

	public void getSum(double d1,double d2){
		
	}
	
    public void getSum(String s,int i){
		
	} //参数列表不同
    
    public void getSum(int i,String s){
		
	}
    
	/*
	public int getSum(int i,int j){
		return 0;
	} //返回值类型
	
    
    public void getSum(int m,int n){
    	
    } //形参变量名
    
    private void getSum(int i,int j){
    	
    } //权限修饰符
	*/
}



package com.atguigu.exer;

public class OverLoadExer {

	public static void main(String[] args) {
		OverLoadExer exer = new OverLoadExer();
		exer.mOL(99);
		exer.mOL(99,100);
		exer.mOL('A');
		


	}
	//1. 如下三个方法构成重载
	public void mOL(int i){
	    System.out.println(i * i);		
	}
	
	public void mOL(int i,int j){
		System.out.println(i * j);
	}
	
	public void mOL(String s){
		System.out.println(s);
	}
	
	//2. 如下三个方法构成重载
	public int max(int i,int j){
		return (i > j)? i : j;
	}
	
	public double max(double d1,double d2){
		return (d1 > d2)? d1 : d2;
	}
	
	public double max(double d1,double d2,double d3){
		double max = (d1 > d2)? d1 : d2;
		return (max > d3)? max : d3;
	}
	
}



package com.atguigu.exer;
/*
 * 可变个数形参的方法
 * 
 * 1. 具体使用：
 *      1.1 可匾个数形参的格式： 数据类型 ... 变量名
 *      1.2 当调用可变个数形参的方法时，传入的参数个数可以是： 0个，1个，2个...
 *      1.3 可变个数形参的的方法与本类中方法名相同，形参不同的方法之间构成重载
 *      1.4 可变个数形参的的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载，即二者不能共存
 *      1.5 可变个数形参在方法的形参中，必须声明在末尾 
 *      1.6 可变个数形参在方法的形参中，最多只能声明一个可变形参
 * 
 */

public class MethodArgsTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		MethodArgsTest test = new MethodArgsTest();
		test.show(12);
		test.show("hello");
		test.show("hello","world","great");
		test.show();
		
		test.show(new String[]{"AA","BB","CC"});
	}

	
	public void show(int i){
		
	}
	
     /*
	public void show(String s){
		System.out.println("show(String)");
	}
     */
	
	public void show(String ... strs){
		System.out.println("show(String ... strs)");
		
		for(int i = 0;i < strs.length;i++){
			System.out.println(strs[i]);
		} //数组的遍历
		
	} //可变个数形参
	
	/*
	public void show(String[] s){
		System.out.println("show(String)");
	} //1.4
	*/
	
	/*
	public void show(String ... strs,int i){
		
	} //String ... strs必须放在后面
	*/
	
}
