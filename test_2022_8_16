package com.atguigu.java2;
/*
 * 包装类的使用：
 * 	1.JAVA提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征
 * 	
 * 	2.掌握的：基本数据类型、包装类、String三者之间的相互转换
 * 
 */

import org.junit.Test;
import org.junit.validator.PublicClassValidator;

public class WeapperTest {

	public static void main(String[] args) {
		

	}
	
	//String类型 ---》基本数据类型、包装类:调用包装类的parseXxx(String s/String类型变量)
	@Test
	public void test5(){
		String str1 = "123";
//		int num1 = (int)str1;
//		Integer in1 = (Integer)str1;
		
		int num2 = Integer.parseInt(str1);
		System.out.println(num2 + 1);
		
		String str2 = "true1";
		boolean b1 = Boolean.parseBoolean(str2);
		System.out.println(b1);
	}
	
	//基本数据类型类型、包装类 ---》 String类型：调用String重载的valueOf(Xxx xxx)
	@Test
	public void test4(){
		
		int num1 = 10;
		//方式一：连接运算
		String str1 = num1 + ""; //10
		System.out.println(str1);
		
		//方式二：调用String重载的valueOf
		float f1 = 7.8f;
		String str2 = String.valueOf(f1);
		System.out.println(str2);//"7.8"
		
		Double double1 = new Double(12.4);
		String str3 = String.valueOf(double1);
		System.out.println(str3); //"12.4"
		
	}
	
	//基本数据类型、包装类 --》String类型
	
	/*
	 *  JDK 5.0 新特性：自动装箱与自动拆箱
	 */
	@Test
	public void test3(){
//		int num1 = 10;
//		//基本数据类型 --》 包装类的对象
//		method(num1);
		
		//自动装箱：基本数据类型 ---》包装类
		int num2 = 10;
		Integer in1 = num2; //自动装箱
		
		boolean b1 = true;
		Boolean b2 = b1; //自动装箱
		
		//自动装箱：包装类 ---》基本数据类型
		System.out.println(in1.toString());
		
		int num3 = in1; //自动拆箱
		
	}

	//包装类 --->基本数据类型:调用包装类Xxx的xxxvalue()
	@Test
	public void test2(){
	Integer in1	= new Integer(12); //包装类
	
	int i1 = in1.intValue(); //i1此时转换为基本数据类型
	System.out.println(i1 + 1); //13
	
	Float f1 = new Float(12.3);
	float f2 = f1.floatValue();
	System.out.println(f2 + 1); //13.3
	}
	
	//基本数据类型 ---》 包装类:调用包装类的构造器
	@Test
	public void test1(){
		
		int num1 = 10;
//		System.out.println(num1.toString);
		Integer in1 = new Integer(num1);
		System.out.println(in1.toString()); //重写toString方法
		
		Integer in2 = new Integer("123");
		System.out.println(in2.toString());
		
		Float float1 = new Float(12.3f);
		Float float2 = new Float("12.3");
		System.out.println(float1);
		System.out.println(float2);
		
		Boolean boolean1 = new Boolean(true);
		Boolean boolean2 = new Boolean("true");
		
		Boolean boolean3 = new Boolean("true123");
		System.out.println(boolean3); //false
		
		Order order = new Order();
		System.out.println(order.isMale); //fasle
		System.out.println(order.isFemale); //null Boolean的默认值
		
	}
}

class Order{
	
	boolean isMale;
	Boolean isFemale;
}


package com.atguigu.exer4;

import java.util.Scanner;
import java.util.Vector;

/*
 * 利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），
 * 找出最高分，并输出学生成绩等级。
 * 提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。
 * 而向量类java.util.Vector可以根据需要动态伸缩。
 * 创建Vector对象：Vector v=new Vector();
 * 给向量添加元素：v.addElement(Object obj);
 * //obj必须是对象取出向量中的元素：Object obj=v.elementAt(0);
 * 注意第一个元素的下标是0，返回值是Object类型的。
 * 计算向量的长度：v.size();
 * 若与最高分相差10分内：A等；20分内：B等；30分内：C等；其它：D等
 */

public class ScoreTest {

	public static void main(String[] args) {
		
		//1.实例化Scanner，用于从键盘获取学生成绩
		Scanner scanner = new Scanner(System.in);
		
		//2.创建Vertor对象：Vector v = new Vector();相当于原来的数组
		Vector v = new Vector();
		
		//3.通过for(;;)或while(true)方式，给Vect中添加数：v.addElement(Object obj);
		int maxScore = scanner.nextInt();
		for(;;){
			System.out.println("请输入学生成绩（以负数代表输入结束）");
			int score = scanner.nextInt(); //输入分数
			
			//3.2当输入是负数时，跳出循环
			//判断输入的是否为负数
			if(score < 0){
				break;
			}
			if(score > 100){
				System.out.println("输入的数据非法，请重新输入：");
				continue;
			}
			//3.1添加操作：v.addElement(Object obj);
			//jdk5.0之前：
//			Integer inScore = new Integer(score); //将分数封装成包装类
//			v.addElement(inScore);//多态
			//jdk5.0之后
			v.addElement(score); //自动装箱
			
			//4.获取学生成绩的最大值
			if(maxScore < score){
				maxScore = score;
			}
		}
		
		//5.遍历Vector，得到每个学生的成绩，并与最大成绩比较，得到每个学生的等级
		char level;
		for(int i = 0;i < v.size();i++){
			Object obj=v.elementAt(i);
			//jdk5.0之前
			Integer inScore = (Integer)obj; //强制转换
			int score = inScore.intValue(); //转换为基本数据类型
			//jdk5.0之后
//			int score = (int)obj;
			
			if(maxScore - score <= 10){
				level = 'A';
			}else if(maxScore - score <= 20){
				level = 'B';
			}else if(maxScore - score <= 30){
				level = 'c';
			}else{
				level = 'D';
			}
			
			System.out.println("student-" + i + " score is " + score + ", level " + level);
			
		}
		
	}

}


package com.atguigu.java;

import java.awt.print.Printable;

public class ReviewTest {

	//数组也作为Object类的子类出现，可以调用Object类中声明的方法
	public void main(String[] args) {
		int[] arr = new int[]{1,2,3,4,};
		
		print(arr);
		
		System.out.println(arr.getClass().getSuperclass());

	}
	
	public void print(Object obj){
		System.out.println(obj);
	}

}



package com.atguigu.java1;
/*
 * static关键字的使用
 * 
 * 	1.static；静态的
 * 	2.static可以用来修饰：属性、方法、代码块、内部类
 * 
 * 	3.使用static修饰属性：静态变量（类变量）
 * 		3.1属性，按是否使用static修饰，分为：静态属性 vs 非静态属性（实例变量）
 * 		实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的
 * 				非静态属性时，不会导致其他对象中同样的属性值的修改
 * 		静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致
 * 				其他对象调用此静态变量时，是修改过了的
 * 		3.2 static修饰属性的其他说明：
 * 			① 静态变量随着类的加载而加载。可以通过"类.静态变量"的方式进行调用
 * 			② 静态对象的加载要早于对象的创建
 * 			③ 由于类只会加载一次，则静态变量在内存中也只会存在一份；存在方法区的静态域中
 * 
 * 			④ 	类变量  	实例变量
 * 			类       yes		 no
 * 			对象	yes		 yes
 * 		3.3 静态属性举例：System.out; Math.PI;
 * 
 * 	4.使用static修饰方法：静态方法
 * 		① 随着类的加载而加载，可以通过“类.静态方法”的方式进行调用
 * 		②       静态方法  	动态方法
 * 			类       yes		 no
 * 			对象	 yes	 yes
 * 		③ 静态方法中，只能调用静态的方法和属性
 * 		  非静态方法，既可以调用静态的方法和属性、也可以调用非静态的方法和属性
 * 
 * 5.static注意点：
 * 	5.1 在静态方法中，不能使用this关键字、super关键字
 *  5.2 关于静态属性和静态方法的使用，从生命周期的角度去理解：即生命周期长（早）的可以调用生命周期短（晚）的，反之不成立
 *  
 * 6. 如何确定一个属性是否声明为static的？
 * 		> 属性是可以被多个对象所共享的，不会随着对象的不同而不同的
 * 		> 类中的常量也常常声明为static
 * 
 * 	  如何确定一个方法是否要声明为static的？
 * 		> 操作静态属性的方法，通常设置为static的
 * 		> 工具类中，习惯上声明为static的。比如，Math、Array、Collections
 *  
 */

import java.util.jar.Attributes.Name;

public class StaticTest {

	public static void main(String[] args) {
		
		Chinese.nation = "中国"; //
		
		Chinese c1 = new Chinese();
		c1.name = "姚明";
		c1.age = 40;
		
		Chinese c2 = new Chinese();
		c2.name = "马龙";
		c2.age = 30;
		
		c1.nation = "CHN";
		
		System.out.println(c2.nation);
		
		//编译不通过，不能通过类去调用实例对象
//		Chinese.name = "张继科";
		
		c1.eat();
		
		Chinese.show(); //随着类的加载而加载
//		Chinese.eat(); //编译不通过
	}

}
//中国人
class Chinese{
	
	String name;
	int age;
	static String nation;
	
	//动态方法
	public void eat(){
		System.out.println("中国人吃中餐");
		walk();
		System.out.println("nation " + Chinese.nation);
	}
	
	//静态方法
	public static void show(){
		System.out.println("我是一个中国人");
		//不能调用非静态的结构
//		eat(); //报错
//		Name = "Tom"; //报错
		System.out.println(nation);
		
		//可以调用静态的结构
		walk();
	}
	
	public static void walk(){
		
	}
	
}



package com.atguigu.java1;
/*
 * static关键字的应用
 */

public class CircleTest {

	public static void main(String[] args) {
		
		Circle circle1 = new Circle();
		
		Circle circle2 = new Circle();
		
		Circle circle3 = new Circle(3.4);
		
		System.out.println("circle1的id: " + circle1.getId());
		System.out.println("circle2的id: " + circle2.getId());
		System.out.println("circle3的id: " + circle3.getId());

		System.out.println("创建圆的个数为： " + Circle.getTotal());
	}

}
class Circle{
	
	private double radius;
	private int id; //自动赋值
	
	//创建构造器为id赋值,统计圆的个数
	public Circle(){
		id = init++;
		total++; //统计圆的个数
	}
	
	public Circle(double raidus){
		this();
//		id = init++;
//		total++;
		this.radius = raidus;
	}
	
	//记录圆的个数
	private static int total;//记录创建的圆的个数
	private static int init = 1001; //static声明的对象，被所有对象共享
	
	public double findArea(){
		return 3.14 * radius * radius;
	}

	public double getRadius() {
		return radius;
	}

	public void setRadius(double radius) {
		this.radius = radius;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public static int getTotal() {
		return total;
	}
	
	
}



package com.atguigu.exer;
/*
 * 编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”，定义封装这些属性的方法。
 * 账号要自动生成。编写主类，使用银行账户类，输入、输出3个储户的上述信息。
 */

public class Account {
	
	private int id;
	private String pwd = "000000";
	private double banlance;
	
	private static double interestRate;
	private static double minMoney = 1.0;
	private static int init = 1001; //用于自动生成id使用的
	
	public Account(){
		id = init++;
	}
	
	public Account(String pwd,double banlance){
		id = init++;
		this.pwd = pwd;
		this.banlance = banlance;
	}
	
	public String getPwd() {
		return pwd;
	}
	public void setPwd(String pwd) {
		this.pwd = pwd;
	}
	public static double getInterestRate() {
		return interestRate;
	}
	public static void setInterestRate(double interestRate) {
		Account.interestRate = interestRate;
	}
	public static double getMinMoney() {
		return minMoney;
	}
	public static void setMinMoney(double minMoney) {
		Account.minMoney = minMoney;
	}
	public int getId() {
		return id;
	}
	public double getBanlance() {
		return banlance;
	}
	
	
	
}



package com.atguigu.exer;

public class AccountTest {

	public static void main(String[] args) {
		
		Account acct1 = new Account();
		Account acct2 = new Account("qwerty",2000);
		
		Account.setInterestRate(0.012);
		Account.setMinMoney(100);
		
		System.out.println(acct1);
		System.out.println(acct2);
		
		System.out.println(acct1.getInterestRate());
		System.out.println(acct1.getMinMoney());

	}

}



package com.atguigu.java2;
/*
 * 单例设计模式：
 *  1.所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例
 * 
 *  2.如何实现？
 * 
 */

import javax.print.attribute.standard.PrinterLocation;

public class Singletontest {
	public static void main(String[] args){
//		Bank bank1 = new Bank();
		
		Bank bank1 = Bank.getInstance();
		Bank bank2 = Bank.getInstance();
		
		System.out.println(bank1 == bank2);
	}

}

//饿汉式单例模式
class Bank{
	
	//1.私有化类的构造器
	private Bank(){
		
	}
	
	//2.内部创建类的对象
	private  static Bank instance = new Bank();
	
	//提供公共的静态的方法，返回类的对象
	public static Bank getInstance(){
		return instance;
	}
	
}
