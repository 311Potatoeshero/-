package com.atguigu.java1;

import java.sql.Date;

/*
 * Object类中toString()的使用
 * 
 * 1.当我们输出一个对象的引用时，实际上就是调用当前对象的toString()
 * 
 * 2.Objcet类中toString()的定义
 * 	 public String toString(){
 * 		return getClass().getName() + "@" + Integer.toHexString(hashCode());
 * 	 }
 * 
 * 3.toSting、Date、File、包装类等都重写了Object类中的toSting()方法
 * 	 使得在调用对象的toString()时，返回“实体内容”信息
 * 
 * 4.自定义类也可以重写toString()方法，当调用此方法时，返回对象的“实体内容”
 * 
 */

public class ToStringTest {

	public static void main(String[] args) {
		
		Customer cust1 = new Customer("Tom",21);
		System.out.println(cust1.toString()); //com.atguigu.java1.Customer@14f7e
		System.out.println(cust1); //com.atguigu.java1.Customer@14f7e
		
		String str = new String("MM");
		System.out.println(str); //MM
		
		Date date = new Date(32432525324L);
		System.out.println(date.toString()); //1971-01-11
	}

}


package com.atguigu.exer2;

public class MyDateTest {

	public static void main(String[] args) {
		MyDate m1 = new MyDate(14,3,1976);
		MyDate m2 = new MyDate(14,3,1976);
		if(m1 == m2){
			System.out.println("m1==m2");
		}else{
			System.out.println("m1!= m2");
		}
		
		if(m1.equals(m2)){
			System.out.println("m1 is equals to m2");
		} else {
			System.out.println("m1 is not equals to m2");
		}

	}

}

class MyDate{
	
	private int day;
	private int month;
	private int year;
	public int getDay() {
		return day;
	}
	public void setDay(int day) {
		this.day = day;
	}
	public int getMonth() {
		return month;
	}
	public void setMonth(int month) {
		this.month = month;
	}
	public int getYear() {
		return year;
	}
	public void setYear(int year) {
		this.year = year;
	}
	
	public MyDate(int day, int month, int year) {
		super();
		this.day = day;
		this.month = month;
	    this.year = year;
	}
	
//		@Override
//	public boolean equals(Object obj) {
//		if (this == obj)
//			return true;
//		if (obj == null)
//			return false;
//		if (getClass() != obj.getClass())
//			return false;
//		MyDate other = (MyDate) obj;
//		if (day != other.day)
//			return false;
//		if (month != other.month)
//			return false;
//		if (year != other.year)
//			return false;
//		return true;
//	}
	
	public boolean equals(Object obj){
		if(this == obj){
			return true;
		}
		
		if(obj instanceof MyDate){
			MyDate myDate = (MyDate)obj;
			return this.day == myDate.day && this.month == myDate.month &&
					this.year == myDate.year;
		}
		
		return false;
	}
	
	
}


package com.atguigu.exer2;
/*
 * 编写Order类，有int型的orderId,String型的orderName，
 * 相应的getter()和setter()方法，两个参数的构造器
 * 重写父类的equals()方法，public boolean equals(Object obj)
 * 并判断测试类中创建的两个对象是否相等
 */

public class OrderTest {
	public static void main(String[] args){
		Order order1 = new Order(1001, "AA");
		Order order2 = new Order(1001, "BB");
		
		System.out.println(order1.equals(order2)); //false
		
		Order order3 = new Order(1001, "BB");
		System.out.println(order2.equals(order3)); //true
		
		//String 常量值相同，保存的地址值相同
		String s1 = "BB";
		String s2 = "BB";
		System.out.println(s1 == s2); //true
	}

}

class Order{
	
	private int orderId;
	private String orderName;
	
	public int getOrderId() {
		return orderId;
	}
	public void setOrderId(int orderId) {
		this.orderId = orderId;
	}
	public String getOrderName() {
		return orderName;
	}
	public void setOrderName(String orderName) {
		this.orderName = orderName;
	}
	public Order(int orderId, String orderName) {
		super();
		this.orderId = orderId;
		this.orderName = orderName;
	}
	
	@Override
	public boolean equals(Object obj){
		
		//判断两者地址是否相同
		if(this == obj){
			return true;
		}
		
		if(obj instanceof Order){
			Order order = (Order)obj; //强制转换
			
			//判读当前orderId的值和形参orderId的值是否相同，比较orderNname的值
			return this.orderId == order.orderId && this.orderName.equals(order.orderName); 
		}
		
		return false;
	}
	
	
}

package com.atguigu.java1;

public class Customer {

	private String name;
	private int age;
	
	public void setName(String name){
		this.name = name;
	}
	
	public String getName(){
		return name;
	}
	
	public void setAge(int age){
		this.age = age;
	}
	
	public int getAge(){
		return age;
	}
	
	//空参构造器
	public Customer(){
		
	}
	
	public Customer(String name,int age){
		super();
		this.name = name;
		this.age = age;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	//自动生成的equals的重写 
	public boolean equals(java.lang.Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Customer other = (Customer) obj;
		if (age != other.age)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}
	
	//重写的原则：比较两个对象的实体内容（即：name和age）是否相同
	//手写实现的equals()的重写
//	@Override
//	public boolean equals(java.lang.Object obj) {
//		if(this == obj){
//			return true;
//		}
//		
//		if(obj instanceof Customer){
//			Customer customer = (Customer)obj;
//			//比较两个对象的每个属性是否都相同
//			if(this.age == customer.age && this.name.equals(customer.name)){
//				return true;
//			}else {
//				return false;
//			}
//			
//			//或
////			return this.age == customer.age && this.name.equals(customer.name);
//		}
//		
//		return false;
//		
//	}
	
	//手动实现
//	@Override
//	public String toString(){
//		return "Customer[name = " + name + ", age = " + age + "]";
//	}
	//自动实现
	@Override
	public String toString(){
		return "Customer[name = " + name + ", age = " + age + "]";
	}
	
}


package com.atguigu.java1;
/*
 * 面试题： == 和 equals()的区别
 * 
 * 一.回顾 == 的使用：
 * 1. == ： 运算符
 * 	1.1可以使用在基本数据类型变量和引用数据类型变量中
 * 	1.2如果比较的是基本数据类型变量，比较两个变量保存的数据是否相等（不一定类型要相同）
 * 	       如果比较的是引用型数据类型变量，比较两个变量的地址值是否相等,即两个对象是否指向同一个实体
 * 
 * 2. equals()方法的使用：
 * 	2.1 是一个方法，而非运算符
 * 	2.2 只能使用于引用数据类型
 * 	2.3 Object类中equals()的定义：
 * 		public boolean equals(Object obj){
 * 			return (this == obj);
 * 		}
 * 	   说明：Object类中定义的equals()和==的作用是相同的，
 * 	  	 如果比较的是引用型数据类型变量，比较两个变量的地址值是否相等,即两个对象是否指向同一个实体
 * 	2.4 像String、Date、File、包装类等都重写了Object类中的equals()方法，
 * 		重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的“实体内容”是否相同
 * 	2.5 通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的“实体内容”是否相同
 * 		那么我们就要对Object类中equals()进行重写
 * 		重写的原则：比较两个对象的实体内容是否相同
 */

import java.sql.Date;

public class EqualsTest {

	public static void main(String[] args){
		
		int i = 10;
		int j = 10;
		double d = 10.0;
		
		//基本数据类型
		System.out.println(i == j); //true
		System.out.println(i == d); //true
		
		boolean b = true;
		
		char c = 10;
		System.out.println(i == c); //true
		
		char c1 = 'A';
		char c2 = 65;
		System.out.println(c1 == c2); //true
		
		//引用数据类型
		Customer cust = new Customer("Tom",21);
		Customer cust1 = new Customer("Tom",21);
		System.out.println(cust == cust1); //false
		
		String str1 = new String("atguigu");
		String str2 = new String("atguigu");
		System.out.println(str1 == str2); //false
		
		System.out.println(cust1.equals(cust)); //false 重写后true
		System.out.println(str1.equals(str2)); //true
		
		Date date1 = new Date(32432525324L);
		Date date2 = new Date(32432525324L);
		System.out.println(date1.equals(date2)); //true
	}
}


package com.atguigu.java1;


public class FinalizeTest {
	public static void main(String[] args) {
		Person p = new Person("Peter", 12);
		System.out.println(p);
		p = null;//此时对象实体就是垃圾对象，等待被回收。但时间不确定。
		System.gc();//强制性释放空间
	}
}

class Person{
	private String name;
	private int age;

	public Person(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	//子类重写此方法，可在释放对象前进行某些操作
	//垃圾回收之前调用该finalize方法
	@Override
	protected void finalize() throws Throwable {
		System.out.println("对象被释放--->" + this);
	}
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}
	
}



package com.atguigu.java1;

//Object类的clone()的使用
public class CloneTest {
	public static void main(String[] args) {
		Animal a1 = new Animal("花花");
		try {
			Animal a2 = (Animal) a1.clone();
			System.out.println("原始对象：" + a1);
			a2.setName("毛毛");
			System.out.println("clone之后的对象：" + a2);
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
	}
}

class Animal implements Cloneable{
	private String name;

	public Animal() {
		super();
	}

	public Animal(String name) {
		super();
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "Animal [name=" + name + "]";
	}
	
	@Override
	protected java.lang.Object clone() throws CloneNotSupportedException {
		// TODO Auto-generated method stub
		return super.clone();
	}
	
}

package com.atguigu.java1;
/*
 * java.lang.objec类
 * 1.Object类是所有JAVA类的根父类
 * 2.如果在类的声明中未使用extends关键字指明父类，则默认父类为Java.Object类
 * 3.Object类中的功能(属性、方法)就具有通用性
 * 	属性·：无
 * 方法： equals() / toString / getclass() / hashCode() / clone() / finalize()
 * 		wait() / notify() / notifyAll() 
 * 4.Object类只声明了一个空参的构造器
 * 
 * 面试题：
 * final、finally、finalize的区别
 * final和finally是关键字、finalize是方法名
 * finalize是垃圾回收的处理方法，在回收前系统灰调用finalize方法，不用主动调用该方法
 */

public class Object {

	public static void main(String[] args) {
		
		Order order = new Order();
		System.out.println(order.getClass().getSuperclass());

	}


}
class Order{
	
}

package com.atguigu.exer1;

public class MyRectangle extends GeometricObject {

	private double width;
	private double height;
	
	//MyRectangle的构造器
	public MyRectangle(double width,double height,String color, double weight) {
		super(color, weight);
		this.width = width;
		this.height = height;
	}

	public double getWidth() {
		return width;
	}

	public void setWidth(double width) {
		this.width = width;
	}

	public double getHeight() {
		return height;
	}

	public void setHeight(double height) {
		this.height = height;
	}
	
	@Override
	public double findArea(){
		return width * height;
	}

}


package com.atguigu.exer1;

public class GeometricObject {

	protected String color;
	protected double weight;
	
	public void setColor(String color){
		this.color = color;
	}
	
	public String getColor(){
		return color;
	}
	
	public void setWeight(double weight){
		this.weight = weight;
	}
	
	public double getWeight(){
		return weight;
	}
	
	public GeometricObject(String color,double weight){
		super();
		this.color = color;
		this.weight = weight;
	}
	
	//求面积
	public double findArea(){
		return 0.0;
	}
}


package com.atguigu.exer1;
/*
 * 定义一个测试类GeometricTest
 * 编写equalsArea方法测试两个对象的面积是否相等
 * 编写displayGeomtricObject方法显示对象的面积
 */

public class GeometricTest {

	public static void main(String[] args) {
		
		GeometricTest test = new GeometricTest();
		
		Circle c1 = new Circle(2.3, "white", 1.0);
		test.displayGeomtricObject(c1);
		Circle c2 = new Circle(3.3, "white", 1.0);
		test.displayGeomtricObject(c2);
		
		boolean isEquals = test.equalsArea(c1,c2);
		System.out.println("c1和c2的面积是否相等：" + isEquals);
		
		MyRectangle rect = new MyRectangle(2.1, 3.4, "red", 2.0);
		test.displayGeomtricObject(rect);
		
	}
	
	public void displayGeomtricObject(GeometricObject o){//GeometriObject o = new Circle(...); 多态性
		System.out.println("面积为： " + o.findArea()); //调方法时，调用子类重写的方法  --虚拟方法调用
	}
	
	//测试两个对象的面积是否相等
	public boolean  equalsArea(GeometricObject o1,GeometricObject o2){
		return o1.findArea() == o2.findArea();
	}

}


package com.atguigu.exer1;

public class Circle extends GeometricObject {

	protected double radius;
	
	public Circle(double radius,String color, double weight) {
		super(color, weight);
		this.radius = radius;
	}
	
	public void setRadius(double radius){
		this.radius = radius;
	}
	
	public double getRadius(){
		return radius;
	}
	
	//重写父类中的方法
	public double findArea(){
		return 3.14 * radius * radius;
	}

}
