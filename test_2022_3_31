//#include <stdio.h>
//int main()
//{
//	unsigned long pulArray[] = { 6,7,8,9,10 };
//	unsigned long *pulPtr;
//	pulPtr = pulArray; //数组名赋给pulPtr
//	//数组名是首元素地址-6
//	*(pulPtr + 3) += 3;
//	//*(pulPtr+3)指向9，+3变成12
//	printf("%d %d\n", *pulPtr, *(pulPtr + 3));
//	//6 12
//	return 0;
//}

//#include <stdio.h>
//#include <string.h>
//#include <assert.h>
//void reverse(char* str)
//{
//	assert(str);
//	int len = strlen(str);
//	char* left = str;
//	char* right = str + len - 1;
//	//末尾字符指针地址，首元素加长度减一
//	while(left < right)
//	{ 
//	char tmp = *left;
//	*left = *right;
//	*right = tmp;
//	left++;
//	right--;
//	}
//}
//int main()
//{
//	char arr[256] = { 0 };
//	scanf_s("%s", arr);
//	reverse(arr);
//	//abcdef --》 fedcba
//	//逆序函数
//	printf("%s\n", arr);
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	int a = 0;
//	int n = 0;
//	scanf_s("%d%d", &a, &n);
//	int sum = 0;
//	int i = 0;
//	int ret = 0;
//	for (i = 0; i < n; i++)
//	{
//		ret = ret * 10 + a;
//		sum += ret;
//	}
//	printf("%d\n", sum);
//	return 0;
//}

//#include <stdio.h>
//#include <math.h>
//int main()
//{
//	int i = 0;
//	for (i = 0; i <= 100000; i++)
//	{
//		//判断i是否为水仙花数
//		//1.计算i的位数 - n位数
//		int n = 1;
//		int tmp = 1;
//		int sum = 0;
//		while (tmp /= 10)
//		{
//			n++;
//		}
//		//2,计算i的每一位的n次方之和 sum
//		tmp = i;
//		while (tmp)
//		{
//			sum += pow(tmp % 10, n);
//			tmp /= 10;
//		}
//		//3,比较i==sum
//		if (i == sum)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}

//#include <stdio.h>
////打印菱形
////上层空格减少，星号增加
//int main()
//{
//	int line = 0;
//	scanf_s("%d", &line);
//	//打印上半部分
//	int i = 0;
//	for (i = 0; i < line; i++)
//	{
//		//打印空格
//		int j = 0;
//		for (j = 0; j < line - 1 - i; j++)
//		{
//			printf(" ");
//		}
//		//打印*
//		for (j = 0; j < 2*i+1; j++)
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	//打印下半部分
//	for (i = 0; i < line - 1; i++)
//	{
//		int j = 0;
//		//打印空格
//		for (j = 0; j <= i; j++)
//		{
//			printf(" ");
//		}
//		//打印*
//		for (j = 0; j < 2 * (line - 1 - i) - 1; j++)
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	return 0;
//}

