//#include <stdio.h>
//int main()
//{
//	int a[5] = { 1,2,3,4,5 };
//	int *ptr = (int*)(&a + 1);
//	printf("%d,%d\n", *(a + 1), *(ptr - 1));
//	return 0;
//}

//#include <stdio.h>
//struct test
//{
//	int Num;
//	char *pcName;
//	short sDate;
//	char cha[2];
//	short sBa[4];
//}* p;
//int main()
//{
//	printf("%p\n", p + 0x1);
//	//16地址存储0x000000+1 -> 0x000014
//	printf("%p\n", (unsigned long)p + 0x1);
//	//整数型地址 +1 就是在原来的基础上+1 
//	// —》0x000001
//	printf("%p\n", (unsigned int*)p + 0x1);
//	//整型指针大小 +4 -》0x000004
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	int a[4] = { 1,2,3,4 };
//	int *ptr1 = (int *)(&a + 1);
//	int *ptr2 = (int *)((int)a + 1);
//	printf("%x,%x", ptr1[-1], *ptr2);
//	return 0;
//	//4 , 020000000
//}

//#include <stdio.h>
//int main()
//{
//	int a[3][2] = { (0,1),(2,3),(4,5) };
//	//逗号表达式，存放的数字为1，3，5，0，0，0
//	int *p;
//	p = a[0];
//	printf("%d", p[0]);
//	return 0;
//	// 1
//}

//#include <stdio.h>
//int main()
//{
//	int a[5][5];
//	int(*p)[4];
//	p = a;
//	printf("%p,%d\n", &p[4][2] - &a[4][2], &p[4][2] - &a[4][2]);
//	return 0;
//	//0x FF FF FF FC -4
//}

//#include <stdio.h>
//int main()
//{
//	int aa[2][5] = { 1,2,3,4,5,6,7,8,9,10 };
//	int *ptr1 = (int *)(&aa + 1);
//	//&aa表示数组，+1 跳过一个数组
//	int *ptr2 = (int *)(*(aa + 1));
//	//aa表示首元素，+1 到第二行首元素地址
//	printf("%d,%d\n", *(ptr1 - 1), *(ptr2 - 1));
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	const char *a[] = { "work","at","alibaba" };
//	const char**pa = a;
//	pa++;
//	printf("%s\n", *pa);
//	return 0;
//	// at
//}

#include <stdio.h>
int main()
{
	const char *c[] = { "ENTER","NEW","POINT","FIRST" };
	//数组元素是char* 
	const char**cp[] = { c + 3,c + 2,c + 1,c };
	const char***cpp = cp;
	printf("%s\n", **++cpp);
	printf("%s\n", *--*++cpp + 3);
	printf("%s\n", *cpp[-2] + 3);
	printf("%s\n", cpp[-1][-1] + 1);
	return 0;
}
