#pragma once //头文件
//#include <stdio.h>
//#include <stdlib.h>
////声明
////防止被重复包含
//
////静态数据表（不能按需存取-固定大小）
////顺序表，有效数组在数组中必须是连续的
//typedef int SLDataType;
////若改变类型，直接将int 变换 其他类型即可
//#define N 10 
////宏定义，可变换数组大小
//
//typedef struct SeqList
//{
//	SLDataType a[N];
//	int size;//存了多少有效数字
//	int capacity;//容量空间的大小
//}SL,SeqList;
//
//void SeqListInit(SL s);
//void SeqListPushBack(struct SeqList* ps, SLDataType x);//接口
////尾部的插入
//void SeqListPopBack(struct SeqList* ps);
////头上的插入
//void SeqListPushFront(struct SeqList* ps, SLDataType x);
////尾部的删除
//void SeqListPopBack(struct SeqList* ps);
////头上的删除
////尾插尾删 头插头删
//
////任意位置的插入删除
//void SeqListInsert(struct SeqList* ps, int pos, SLDataType x);
//void SeqListErase(struct SeqList* ps, int pos, SLDataType x);

//#include "SeqList.h"
////测试
//
//void SeqListInit(SL s)
//{
//	/*s.size = 0;
//	s.a = NULL;
//	s.capacity = 0;*/
//	s.a = (SLDataType*)malloc(sizeof(SLDataType) * 4);
//	if (s.a == NULL)
//	{
//		printf("申请内存失败\n");
//		exit(-1);
//	}
//	s.size = 0;
//	s.capacity = 0;
//}
//
//void SeqListPushBack(struct SeqList* ps, SLDataType x);//接口
////尾部的插入
//void SeqListPopBack(struct SeqList* ps);
////头上的插入
//void SeqListPushFront(struct SeqList* ps, SLDataType x);
////尾部的删除
//void SeqListPopBack(struct SeqList* ps);
//
////任意位置的插入删除
//void SeqListInsert(struct SeqList* ps, int pos, SLDataType x);
//void SeqListErase(struct SeqList* ps, int pos);
//
//void SeqListInit(SL s)
//{}
//
//void SeqListPopBack(struct SeqList* ps)
//{}
//
//void SeqListPushFront(struct SeqList* ps, SLDataType x)
//{}
//
//void SeqListInsert(struct SeqList* ps, int pos, SLDataType x)
//{}
//
//void SeqListErase(struct SeqList* ps, int pos)
//{}
//
//void SeqListErase(struct SeqList* ps, int pos, SLDataType x)
//{}

//#include "SeqList.h"
//
////测试头尾插入删除
//void TestSeqList1()
//{
//	SeqList s;//结构体（需要初始化）
//	SeqListInit(s);
//	SeqListPushBack(&s, 1);
//	SeqListPushBack(&s, 2);
//	SeqListPushBack(&s, 3);
//}
//
//int main()
//{
//	SeqList s;
//	TestSeqList1();
//	return 0;
//}

//#include <stdio.h>
////输出一个菱形图
//int main()
//{
//	char diamond[][5] = { {' ',' ','*'},{' ','*',' '},{'*',' ',' ','*'},{' ','*',' ','*'},{' ',' ','*'} };
//	int i, j;
//	for (i = 0; i < 5; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			printf("%c", diamond[i][j]);
//			printf("\n");
//		}
//	}
//	return 0;
//}
