package at.guigu.java;

import org.testng.annotations.Test;

import java.io.*;

/**
 * @description:处理流之一：缓冲流的作用
 *
 * 1.缓冲流
 * BufferedInputStream
 * BufferedOutputStream
 * BufferedReader
 * BufferedWriter
 *
 * 缓冲流的作用：提高流写入和读出的作用
 * @author:zyl
 * @create:2022-10-25 09:28:00
 */
public class BufferedTest {

    @Test
    public void testCopyBuffered(){
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            //1.造文件
            File srcFile = new File("4.jpg");
            File destFile = new File("5.jpg");
            //2.造流
            //2.1创建字符流 - 内部流
            FileInputStream fis = new FileInputStream(srcFile);
            FileOutputStream fos = new FileOutputStream(destFile);
            //2.2创建缓冲流 - 外层流
            bis = new BufferedInputStream(fis);
            bos = new BufferedOutputStream(fos);

            //3.复制的细节：读取、写入操作
            byte[] buffer = new byte[10];
            int len;
            while((len = bis.read(buffer)) != -1){
                bos.write(buffer,0,len);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {

            try {
                //4.关闭流资源
                // 先关闭外层流、再关闭内层流。 注：关闭外层流的同时，内部流会被关闭，可以省略内部流的关闭
                if(bis != null)
                bis.close();

            } catch (IOException e) {
                e.printStackTrace();
            }

            try {
                if(bos != null)
                bos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }



    }
}


package at.guigu.java;

import org.testng.annotations.Test;

import java.io.*;

/**
 * @description:
 * @author:zyl
 * @create:2022-10-23 16:29:00
 *
 *  1.read()的理解：返回读到的第一个字符，如果达到文件末尾返回的是-1
 *  2.异常的处理：为保证流资源一定可以执行关闭操作，需要使用try-catch-finally处理
 *  3.读入的文件一定要存在，否则会报FileNotFoundException
 */
public class TestFileReader {
    public static void main(String[] args) {
        File file = new File("Hello.txt"); //相较于当前工程
        System.out.println(file.getAbsolutePath());

        File file1 = new File("day09\\Hello.txt"); //绝对地址
        System.out.println(file1.getAbsolutePath());
    }

    @Test
    public void test1() throws IOException {
        FileReader fr = null;

        try {
            //1.实例化File类的对象，指明要操作的文件
            File file = new File("Hello.txt"); //相当于当前Module
            //2.提供具体的流
            fr = new FileReader(file);

            //3.数据的读入
            //read():返回读到的第一个字符，如果达到文件末尾返回的是-1
            int data = fr.read();
            while(data != -1){
                System.out.print((char)data);
                data = fr.read();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            //4.流的关闭操作
            try {
                if(fr != null)
                fr.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    /*
    //对read()操作的升级，使用read的重载方法
    @Test
    public void testFileReader() throws IOException {
        FileReader fr = null;

        try {
            //1.File类的实例化
            File file = new File("Hello.txt");
            //2.FileReader流的实例化
            fr = new FileReader(file);
            //3.读入操作
            //read()
            char[] cbuf = new char[5]; //创建cubf数组，一次读入多个字符,一次读5个
            boolean len;
            while((len = (fr.read(cbuf)) != -1)) {
                //错误写法
//                for(int i = 0;i <= cbuf.length;i++){
//                    System.out.println(cbuf[i]);
//                }

                for(int i = 0;i < len;i++){
                    System.out.println(cbuf[i]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                //4.资源的关闭
                if(fr != null){
                    fr.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }


     */
    @Test
    public void testFileWriter() throws IOException {
        //1.提供File类的对象，指明写出到的对象
        File file = new File("Hello1.txt");

        //2.提供FileWriter对象，用于数据的读出
        FileWriter fw = new FileWriter(file,false);

        //3.写出的操作
        fw.write("I Have a Dream");
        fw.write("You need to have a Dream");

        //4.流的关闭
        fw.close();
    }

    @Test
    public void testFileReaderFileWriter() {
        /*
         * 不能使用字符流读入写出图片
         */

        FileReader fr = null;
        FileWriter fw = null;

        try {
            //1.创建File类的对象，指明读入和写出的文件
            File srcfile = new File("Hello.txt");
            File destfile = new File("Hello1.txt");

            //2.创建输入和输出流的对象
            fr = new FileReader(srcfile);
            fw = new FileWriter(destfile);

            //3.数据的读入和写出操作
            char[] cubf = new char[5];
            int len;// 记录每次读入到cubf数组中字符的个数
            while((len = fr.read(cubf)) != -1 ){
                //每次写出len个字符
                fw.write(cubf,0,len);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            //4.关闭流资源
            try {
                if(fr != null){
                    fr.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }


            try {
                if(fw != null){
                    fw.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }




    }


}
