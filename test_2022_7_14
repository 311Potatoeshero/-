package com.atguigu.exer1;
/*
 *  递归方法的使用
 *   1.递归方法： 一个方法体内调用它自身
 */
public class Recursion {

	public static void main(String[] args) {

		//例1，计算1-100之间所有自然数的和
		//方式1
//		int sum = 0;
//		for(int i = 1;i <= 100;i++){
//			sum += i;
//		}
		
		//方式2
		Recursion test = new Recursion();
		int sum = test.getSum(100);
		System.out.println(sum);
		
		int f = test.f(10);
		System.out.println(f);
		
		int value = test.fibonacci(6);
		System.out.println(value);

	}

public int getSum(int n){
	// 隐性循环
	if(n == 1){
		return 1;
	}else{
		return n + getSum(n - 1);
	}
}

    //例3，已知有一个数列：f(0) = 1,f(1) = 4,f(n + 2) = 2 * f(n + 1) + f(n),
    //其中n时大于0的整数，求f(10)的值
public int f(int n){
	if(n == 0){
		return 1;
	}else if(n == 1){
		return 4;
	}else{
		return 2 * f(n - 1) + f(n - 2);
	}
}

    //例4,斐波那契数列
public int fibonacci(int n){
	if(n == 1){
		return 1;
	}else if(n == 2){
		return 1;
	}else{
		return fibonacci(n - 1) + fibonacci(n - 2);
	}
}


}
