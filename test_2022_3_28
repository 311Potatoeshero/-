//#include <stdio.h>
////一堆整型数组大小
//int main()
//{
//	//数组名是首元素的地址
//	//1.sizeof(数组名)-数组名表示整个数组
//	//2.&数组名 - 数组名表整个数组
//	int a[] = { 1,2,3,4 };
//	printf("%d\n", sizeof(a));
//	//4*4 sizeof(数组名)- 计算的是数组总大小-单位是字节
//	printf("%d\n", sizeof(a + 0));
//	//4/8 数组名这里表示首元素的值，a+0还是首元素
//	printf("%d\n", sizeof(*a));
//	//4 数组名表示首元素地址，*a就是首元素，sizeof（*a)就是4
//	printf("%d\n", sizeof(a + 1));
//	//4/8 a+1表示跳过一个元素，a+1 是第二个元素地址
//	printf("%d\n", sizeof(a[1]));
//	//4 第二个元素的大小
//	printf("%d\n", sizeof(&a));
//	//4 &a取出的是数组的地址，但是数组的地址也是地址，地址的大小就是4/8个
//	printf("%d\n", sizeof(*&a));
//	//16 &a是数组的地址，数组的地址解引用访问数组的地址
//	printf("%d\n", sizeof(&a + 1));
//	//4/8 &a+1也是地址，中间跳过一个数组
//	printf("%d\n", sizeof(&a[0]));
//	//4/8 &a[0]是第一个数的地址
//	printf("%d\n", sizeof(&a[0] + 1));
//	//4/8 &a[0]是第二个数的地址
//	return 0;
//}

/*#include <stdio.h>
#include <string.h>
////字符数组
int main()
{
    char arr[] = { 'a','b','c','d','e','f' };
	printf("%d\n", strlen(arr));
	//随机值
	printf("%d\n", strlen(arr + 0));
	//随机值
	printf("%d\n", strlen(*arr));
	//报错 strlen只要地址，*解引用首元素地址，传字符过去
	printf("%d\n", strlen(arr[1]));
	//报错
	printf("%d\n", strlen(&arr));
	//随机值
	printf("%d\n", strlen(&arr + 1));
	//随机值-6
	printf("%d\n", strlen(&arr[0] + 1));
	//随机值-1
//	printf("%d\n", sizeof(arr));
//	//6 sizeof()计算的是数组的大小
//	printf("%d\n", sizeof(arr + 0));
//	//4/8 arr + 0 是首元素地址（地址大小是4/8）
//	printf("%d\n", sizeof(*arr));
//	//1 arr是首元素地址，*arr首元素是字符大小是一个字节
//	printf("%d\n", sizeof(arr[1]));
//	//1
//	printf("%d\n", sizeof(&arr));
//	//4/8 &arr 是数组的地址，地址大小是4/8个字节
//	printf("%d\n", sizeof(&arr + 1));
//	//4/8 &arr + 1 地址加1 跳过整个数组后的地址
//	printf("%d\n", sizeof(&arr[0] + 1));
//	//4/8 第二个元素的地址
	return 0;
}*/

#include <stdio.h>
#include <string.h>
struct Stu
{
	char name[20];
	int age;
};
int cmp_int(const void* e1, const void* e2)
{
	return *(int*)e1 - *(int*)e2;
}
void Swap(char* buf1, char* buf2, int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}

void bubble_sort(void* base, int sz, int width, int(*cmp)(void* e1, void* e2))
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (cmp((char*)base + j * width, (char*)base + (j + 1)*width) > 0)
			{
				Swap((char*)base + j * width, (char*)base + (j + 1)*width, width);
			}
		}
	}
}
void test1()
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_int( e1, e2 ));
}
void test2()
{
	struct Stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	bubble_sort(s, sz, sizeof(s[0]), cmp_stu_by_name);

}
int main()
{
	return 0;
}
