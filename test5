#define _CRT_SECURE_NO_WARNINGS 1
//#include <stdio.h>
//#include <string.h>
//int main()
//{
//	char arr[] ="hello bit";
//	printf("%d %d", sizeof(arr), strlen(arr));
//	//sizeof计算到'\o',strlen不计算'\0',都计算 空格
//	return 0;
//}
//#include <stdio.h>
//void Init(int arr[], int sz)
////若无返回值，可以定义空函数
//{
//	int i = 0;
//	for (i = 0; i < sz;i++)
//		//遍历数组
//	{
//		arr[i] = 0;
//	}
//}
//void print(int arr[], int sz)
//{
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//}
//void  reverse(int arr[], int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	//sz-1是数组尾数的下标
//	int tmp = 0;
//	while (left < right)
//		//left若<right，则数组无可交换值
//	{
//		tmp = arr[left];
//		arr[left] = arr[right];
//		arr[right] = tmp;
//		//数组内元素交换
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//计算元素个数
//	//Init(arr,sz);
//	//初始化函数，将数组元素全部赋值为0
//	//print(arr, sz);
//	//将函数输出
//	reverse(arr, sz);
//	//将数组逆序输出
//	print(arr, sz);
//	return 0;
//}
//#include <stdio.h>
////交换数组arr1和数组arr2的值
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 6,7,8,9,10 };
//	int tmp = 0;
//	int i = 0;
//	int sz = sizeof(arr1) / sizeof(arr1[0]);
//	for ( i = 0; i < sz; i++)
//	{
//		tmp = arr1[i];
//		arr1[i] = arr2[i];
//		arr2[i] = tmp;
//	}
//	printf("%d %d ", arr1, arr2);
//	return 0;
//}
//#include <stdio.h>
//int main()
//{
//	int arr[] = { 1,2,3,4,5 };
//	short* p = (short*)arr; 
//	//shor指针一次操作两个字符
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		*(p + i) = 0;
//	}
//	for(i= 0;i<5;i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//#include <stdio.h>
//int main()
//{
//	int a, b, c;
//	a = 5;
//	c = ++a;
//	//++先赋值再加减，a=6,c=6
//	b = ++c,c++,++a,a++;
//	//逗号表达式，尽输出最后式即a++,c=8,b=7,a=8
//	b += a++ + c;
//	//+ 优先级大于 ++ b=8+8+7=23,a=9,c=8
//	printf("%d %d %d ", a, b, c);
//	return 0;
//}
//#include <stdio.h> //写一个函数求a的二进制（补码）表示中有几个1
//#include <stdlib.h>
//int count_bit_one(int n)
//{
//	int count = 0;
//	/*int i = 0;
//	while (n)
//	{
//		if (n % 2 == 1)
//		{
//			count++;
//		}
//		n = n / 2;
//	}
//	for (i = 0; i < 32; i++)
//	{
//		if (((n >> i)&1) == 1)
//		{
//			count++;
//		}
//	}*/
//	while (n)
//	{
//		n = n & (n - 1);
//		count;
//	}
//	return count;
//}
//int main()
//{
//	int a = 0;
//	scanf("%d ", &a);
//	int count = count_bit_one(a);
//	printf("count = %d\n ", count);
//	return 0;
//}
#include <stdio.h>
int get_diff_bit(int m, int n)
{
	int tmp = m^n;
	int count = 0;
	while (tmp)
	{
		tmp = tmp & (tmp - 1);
		count++;
	}
	return count;
}
int main()
{
	int m = 0;
	int n = 0;
	scanf("%d%d", &m, &n);
	int count = get_diff_bit(m, n);
	printf("count = %d\n", count);
	return 0;
}
