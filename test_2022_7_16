package com.atguigu.java;
/*
 *  面向对象的特征一：封装与隐藏
 *  赋值操作受到属性的数据类型和存储范围的制约
 *  
 *  封装性的体现：
 *   我们将类的属性私有化（private），同时，提供公有的（public）方法来获取（getxxx）和设置（setxxx）次属性的值
 *   
 *  拓展：封装性的体现：
 *   ① 如上
 *   ② 不对外暴露的私有的方法
 *   ③ 单例模式等
 *   
 * 封装性的体现，需要权限修饰符来配合。
 *  1. Java规定的4种权限（从小到大排列）：private、缺省、protect、public
 *  2. 4中权限可以用来修饰类及类的内部结构：属性、方法、结构器、内部类
 *  3. 具体的，4种权限都可以用来修饰类的内部结构： 属性、方法、结构器、内部类
 *            修饰类的话，只能使用：缺省、public
 *            
 * 总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小
 */

public class AnimalTest {

	public static void main(String[] args){
		
		Animal a = new Animal();
		a.name = "大黄";
//		a.age = 1;
//		a.legs = 4;
		
		a.show();
		
//		a.legs = -4;
//		a.show();
		
//		a.setLegs(6);
//		a.show();
//		
//		a.setLegs(-6);
//		a.show();
		
		System.out.println(a.name);
		
	}
}

class Animal{
	
	String name;
	private int age;
	// 权限修饰符
	private int legs; // 腿的个数
	
	// 创建方法-限制legs
	// 对属性的设置
	public void setLegs(int l){
		if(l >= 0 && l % 2 == 0){
			legs = 1;
		}else {
			legs = 0;
		}
	}
	
	//对属性的获取
	public int getLegs(){
		return legs;
	}
	
	// 创建方法
	public void eat(){
		System.out.println("动物进食");
	}
	
	public void show(){
		System.out.println("名字： " + name +", 年龄： " + age + ",腿的个数 ： " + legs);
	}
	
	//提供关于属性age的get和set的方法
	public int getAge(){ // 有返回值
		return age;
	}
	public void setAge(int a){ // 无返回值
		age = a;
	}
}



package com.atguigu.java;

public class OrderTest {

	public static void main(String[] args){
		
		Order order = new Order();
		
		order.orderDefault = 1;
		order.orderPublic = 2;
		
		// 出了Order类之后，私有的结构就不可以调用了
//		order.orderPrivate = 3;
		
		order.methodDefault();
		order.methodPublic();
		order.methodPrivate();

	}
}



package com.atguigu.java;

public class Order {
	
	private int orderPrivate;
	int orderDefault;
	public int orderPublic;
	
	public void methodPrivate(){
		orderPrivate = 1;
		orderDefault = 2;
		orderPublic = 3;
	}
	
	void methodDefault(){
		orderPrivate = 1;
		orderDefault = 2;
		orderPublic = 3;
	}
	
	public void methodPublic(){
		orderPrivate = 1;
		orderDefault = 2;
		orderPublic = 3;
	}

}



package com.atguigu.java1;

public class OrderTest {
	public void main(String[] args){
		
		OrderTest order = new OrderTest();
		
//		order.orderPublic = 2;
//		order.orderDefault = 1;
//		出了Order类之后，缺省的结构就不可以调用了
		
		// 出了Order类之后，私有的结构就不可以调用了
//		order.orderPrivate = 3;
		
//		order.methodPublic();
//		order.methodDefault();
//		出了Order类之后，缺省的结构就不可以调用了
		
//		order.methodPrivate();
//		出了Order类之后，私有的结构就不可以调用了

	}
}



package com.atguigu.java;

public class ValueTransferTest {

	public static void main(String[] args) {
		
		String s1 = "hello";
		// s1 引用数据类型 
		
		ValueTransferTest test = new ValueTransferTest();
		test.change(s1);
		
		System.out.println(s1); // hello
		

	}
	
	public void change(String s){
		s = "hi~~";
	}

}



package com.atguigu.exer;

public class Person {
	
	public static void main(String[] args) {

	}
	
	private int age;
	
	public void setAge(int a){
		if(a < 0 || a > 130){
			System.out.println("传入的数据非法！");
		}else{
			age = a;
		}
	}
	
	public int getAge(){
		return age;
	}

}



package com.atguigu.exer;

public class PersonTest {

	public static void main(String[] args) {
		
		Person p1 = new Person();
		
		//p1.age = 1; 
		// 编译不通过
		
		p1.setAge(12);
		
		System.out.println("年龄为： " + p1.getAge());

	}

}
