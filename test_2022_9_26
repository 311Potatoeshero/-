package day01;

import java.util.Arrays;

/**
 * 快速排序
 * @author Administrator
 *
 */

public class QuickSort {

	public static void main(String[] args) {
		
		int[] array = {0,2,6,9,7,5,4,3,1,8}; //创建array数组，用于排序
		
		//输出排序前的元素位置
		System.out.println("排序前：");
		System.out.println(Arrays.toString(array));
		
		quickSort(array, 0 ,array.length - 1); //调用quickSort方法用于排序
		
		//输出排序后的元素位置
		System.out.println("排序后：");
		System.out.println(Arrays.toString(array));
	}
		
		//快速排序
		public static void quickSort(int[] nums,int start,int end) { //创建quickSort方法实现快速排序
			//递归出口
			if(start > end) {
				return;
			}
			
			//以数组中的一个值作为基准
			int key = nums[start];
			//定义两个指针
			int left = start;
			int right = end;
			
			while(left != right) {
				//找出第一个比基准小的值，并将右指针指向它
				while(right > left && nums[right] >= key) {
					right--;
				}
				
				//找出第一个比基准大的值，并将左指针指向它
				while(left < right && nums[left] <= key) {
					left++;
				}
				
				//此时左右指针指向同一位置，将基准与该位置的值交换
		        nums[start] = nums[left];
		        nums[left] = key;
			}
					
		//将左边数组进行一次递归
		quickSort(nums,start,left-1);
		
		//右边数组进行一次递归
		quickSort(nums,left + 1,end );
	}

}


package aaa;
/**
 * 冒泡排序的方法工具
 * @author Administrator
 *
 */

public class BubbleSort {
	
	public void bubbleSort(int[] array) {
		for(int i = 0; i < array.length - 1;i++) {//遍历趟数
			for(int j = 0;j < array.length - 1 - i;j++) {//比较两个相邻的数
				if(array[j] > array[j + 1]) {
					int temp = 0;
				    temp = array[j];
				    array[j] = array[j + 1];
				    array[j + 1] = temp;
				}
 
			}
		}
	}

}


package aaa;

public class BubbleSortTest extends BubbleSort{


	public static void main(String[] args) {
		
		int[] array = new int[] {99,56,45,101,-94};
		
		BubbleSortTest bubb = new BubbleSortTest();
		System.out.print(bubb.bubbleSort(array));
	}

}
-----------------------------------------------------------------------------------------------
package day01;
/**
 * 冒泡函数
 */

import java.util.Arrays;

public class BubbleSort {

	public static void main(String[] args) {
		int[] array = {12,51,99,-21,66}; //创建array数组
		int temp = 0;
		boolean flag = false; //判断交换元素是否发生
		
		for(int i = 0;i < array.length - 1;i++) { //遍历趟数
			for(int j = 0 ;j < array.length - 1 - i; j++) { //比较两个相邻的元素，交换位置
				if(array[j] > array[j + 1]) {
					flag = true;
					temp = array[j];
					array[j] = array[j + 1];
					array[j + 1] = temp;
				}
			}
			System.out.println("第" + (i + 1) + "趟后的数组元素");
			System.out.println(Arrays.toString(array));
			
			if(!flag) {
				break;
			}
			else {
				flag = false; //重置flag,用于下一次循环
			}
			
		}
		
		//输出最后的结果
		System.out.println("最终结果：");
		for(int i = 0;i < array.length;i++) {
			System.out.print(array[i] + " ");
		}
	}

}
