package com.atguigu.java;

import org.junit.Test;

import java.util.*;

/**
 * @description:
 * @author:zyl
 * @create:2022-10-15 17:04:00
 */
public class MapTest {

    @Test
    public void test2() {
        Map map = (Map) new HashMap();

        //Object put(Object key,Object value)添加操作，CC=87 代替了 CC=123
        map.put("CC", 123);
        map.put("DD", 456);
        map.put(45, 123);
        map.put("CC", 87);

        System.out.println(map);

        //putall 将一个集合中的所有元素添加的另一个集合中
        Map map1 = new HashMap();

        map1.put("AA", 789);
        map1.put("BB", 789);

        map.putAll(map1);

        System.out.println(map);

        //remove(Object key)移除操作,若移除的值不存在，null
        map.remove("AA");
        System.out.println(map);

        //clear 清空集合元素，保留集合
        map.clear();//与map = null 不同
        System.out.println(map.size()); //0
        System.out.println(map); //{}
    }

        /*
        元素查询操作：
         */
        @Test
        public void test1() {
            Map map = new HashMap();
            Map map1 = new HashMap();

            map.put("AA",123);
            map.put("BB",456);
            map.put("CC",789);
            map1.put("DD",789);
            map1.put("EE",789);
            map1.put("FF",789);

            //Object get(Object key):获取指定key对应的value,不存在返回null
            System.out.println(map.get("AA"));

            //boolean containsKey(Object key):是否包含指定的key
            boolean isExist = map.containsKey("BB");
            System.out.println(isExist);

            //boolean containsKey(Object value):是否包含指定的value
            boolean isExist1 = map.containsValue("456");
            System.out.println(isExist1);

            //int size():返回map中key-value对的个数
            System.out.println(map.size());

            //boolean isEmpty():判断当前map是否为空
            System.out.println(map.isEmpty());

            //boolean equals(Object obj): 判断当前map和参数对象obj是否相等
            System.out.println(map.equals(map1));
        }

        /*
        元视图的操作方法
        Set keySet()： 返回所有key构成的Set集合
        Collection values(): 返回所有value构成的Collection集合
        Set entrySet(): 返回所有key-value对构成的集合
         */

    @Test
    public void test3(){

        Map map = new HashMap();
        map.put("AA",123);
        map.put("BB",456);
        map.put("CC",789);

        //遍历所有的key集：keySet()
        Set set = map.keySet();
        Iterator iterator = set.iterator(); //迭代器
        while (iterator.hasNext()){
            System.out.println(iterator.next());
        }

        System.out.println();
        //遍历所有的value集：values()
        Collection values = map.values();
        for(Object obj : values){
            System.out.println(obj);
        }
        System.out.println();
        //遍历所有的key-value
        //方式一：entrySet()
        Set entrySet = map.entrySet();
        Iterator iterator1 = entrySet.iterator();
        while(iterator1.hasNext()){
            Object obj = iterator1.next(); //强转
            //entrySet集合中的元素都是entry
            Map.Entry entry = (Map.Entry) obj;
            System.out.println(entry.getKey() + "---->" + entry.getValue());
        }
        //方式二：
        Set keySet = map.keySet();
        Iterator iterator2 = keySet.iterator();
        while (iterator2.hasNext()){
            Object key = iterator2.next();
            Object value = map.get(key);
            System.out.println(key + "=====" + value);
        }

    }

}
