package com.atguigu.exer;
/*
 *  关于变量的赋值
 * 
 *   如果变量是基本数据类型，此时赋值的是变量所保存的数据值
 *   如果变量是引用型数据类型，此时赋值的是变量所保存的数据的地址值
 * 
 */

public class ValueTransferTest {
	
	public static void main(String[] args){
		
		/*
		// 基本数据类型:
		int m = 10;
		int n = m;
		
		System.out.println("m = " + m + ", n = " + n);
		
		n = 20;
		
		System.out.println("m = " + m + ", n = " + n);
		*/
		
		Order o1 = new Order();
		o1.orderId = 1001;
		
		Order o2 = o1; // 赋值以后，o1和o2的地址值相同，
		
		System.out.println("o1.orderId = " + o1.orderId + " ,o2.orderId = " + o2.orderId);
		
		o2.orderId = 1002;
		
		System.out.println("o1.orderId = " + o1.orderId + " ,o2.orderId = " + o2.orderId);
	}

}

class Order{
	int orderId;




package com.atguigu.exer;
/*
 * 方法的形参的传递机制，值传递
 * 
 *     1. 形参： 方法定义时，声明的小括号内的参数
 *        实参： 方法调用时，实际传递给形参的数据
 *        
 *     2.值传递机制：
 *         如果参数是基本数据类型，此时实参赋给形参的是，实参真实存储的数据值
 *         如果参数是引用数据类型，此时实参赋给形参的是，实参存储数据的地址值
 */

public class ValueTransferTest1 {

	public static void main(String[] args){
		
		// 交换两个变量的值的操作
		int m = 10;
		int n = 20;
		
		System.out.println("m = " + m + ", n = " + n );
		// int temp = m;
		// m = n;
		// n = temp;
		
		ValueTransferTest1 test = new ValueTransferTest1(); // 创建对象
		test.swap(m, n); // 没交换成功
		
		System.out.println("m = " + m + " , n = " + n );
	}
	
	// 创造值传递的方法
	public void swap(int m,int n){
		int temp = m;
		m = n;
		n = temp;
	}
}



package com.atguigu.exer;

public class ValueTransferTest2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Data data = new Data();
		
		data.m = 10;
		data.n = 20;
		
		System.out.println("m = " + data.m + ", n = " + data.n);
		
		ValueTransferTest2 test = new ValueTransferTest2();
		test.swap(data);
		
		// 交换m和n的值
//		int temp = data.m;
//		data.m = data.n;
//		data.n = temp;
		
		System.out.println("m = " + data.m + ", n = " + data.n);
	}
	
	public void swap(Data data){
		
		int temp = data.m;
		data.m = data.n;
     	data.n = temp;
	}

}

class Data{
	
	int m;
	int n;
}
