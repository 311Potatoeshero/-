package com.atguigu.java4;
/*
 * 面向对象特征之三： 多态性
 * 
 * 1.理解多态性： 可以理解为一个事物的多种形态
 * 2.何为多态性：
 * 	对象的多态性： 父类的引用指向子类的对象（或子类的对象赋给父类的引用）
 * 3.多态的使用：
 * 	当调用子父类同名参数的方法时，实际执行的是子类重写父类的方法 --- 虚拟方法调用
 * 	有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法
 * 	总结：编译看左边，运行，看右边
 * 4.多态性的使用前提：
 * 	①： 要有类的继承关系
 * 	②： 要有方法的重写
 * 5.对象的多态性： 只适用于方法，不适用于属性（编译和运行都看左边）
 * 
 */

public class PersonTest {

	public static void main(String[] args) {
		
		Person p1 = new Person();
		p1.eat();
		
		Man man = new Man();
		man.eat();
		man.age = 25;
		man.earnMoney();
		
		//**********************************
		//子类对象的多态性: 父类的引用指向子类的对象
		Person p2 = new Man();
		p2.eat();
//		p2.earnMoney();
		
		Person p3 = new Woman();
		
		System.out.println(p2.id); //1001 

	}

}



package com.atguigu.java4;

public class Person {
	
	String name;
	int age;
	int id = 1001;
	
	public void eat(){
		System.out.println("人，吃饭");
	}
	
	public void walk(){
		System.out.println("人，走路");
	}

}


package com.atguigu.java4;

public class Man extends Person{

	boolean isSomking;
	int id = 1002;
	
	public void earnMoney(){
		System.out.println("男人负责挣钱养家");
	}
	
	//对父类中方法的重写
	public void eat(){
		System.out.println("男人多吃肉，长肌肉");
	}
	
	public void walk(){
		System.out.println("男人霸气的走路");
	}
}



package com.atguigu.java4;

public class Woman extends Person{

	boolean isBeauty;
	
	public void goShopping(){
		System.out.println("女人喜欢购物");
	}
	
	public void eat(){
		System.out.println("女人少吃，为了减肥");
	}
	
	public void walk(){
		System.out.println("女人窈窕的走路");
	}
}



package com.atguigu.java4;
//多态性的使用举例一：

import java.sql.Connection;

public class AnimalTest {
	
	public static void main(String[] args){
		AnimalTest test = new AnimalTest();
		test.func(new Dog());
		
		test.func(new Cat());
	}
	
	//使用多态性
	public void func(Animal animal){
		animal.eat();
		animal.shout();
	}
	
	//不使用多态性
	public void func(Dog dog){
		dog.eat();
		dog.shout();
	}
	
	public void func(Cat cat){
		cat.eat();
		cat.shout();
	}

}

//测试类
class Animal{
	
	public void eat(){
		System.out.println("动物，进食");
	}
	
	public void shout(){
		System.out.println("动物,叫");
	}
	
}
class Dog extends Animal{
	
	public void eat(){
		System.out.println("狗吃骨头");
	}
	
	public void shout(){
		System.out.println("汪！汪！汪！");
	}
}
class Cat extends Animal{
	
	public void eat(){
		System.out.println("猫吃鱼");
	}
	
	public void shout(){
		System.out.println("喵！喵！喵！");
	}
}

//举例二

class Order{
	public void method(Object obj){
		
	}
}

//举例三
class Driver{
	
	public void doDate(Connection conn){ //conn = new MySqlConnection();
		
	}
}



package com.atguigu.java5;

import java.util.Random;

//面试题：多态是编译时行为还是运行时行为？  //运行时行为
//证明如下：
class Animal  {
 
	protected void eat() {
		System.out.println("animal eat food");
	}
}

class Cat  extends Animal  {
 
	protected void eat() {
		System.out.println("cat eat fish");
	}
}

class Dog  extends Animal  {
 
	public void eat() {
		System.out.println("Dog eat bone");

	}

}

class Sheep  extends Animal  {
 

	public void eat() {
		System.out.println("Sheep eat grass");

	}

 
}

public class InterviewTest {

	public static Animal  getInstance(int key) {
		switch (key) {
		case 0:
			return new Cat ();
		case 1:
			return new Dog ();
		default:
			return new Sheep ();
		}

	}

	public static void main(String[] args) {
		int key = new Random().nextInt(3); // Random().nextInt(3) 生成一个0、1、2的随机数

		System.out.println(key);

		Animal  animal = getInstance(key);
		
		animal.eat();
		 
	}

}
