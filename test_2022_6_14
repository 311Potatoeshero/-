//求自守数

/*
public class JavaBasic23 {
    //用于判断这一个数是否是自守数
    public static boolean isSelfGuardingNumber (int num) {
        //boolean flag = true;

        String s = Integer.toString(num);       //将输入的正整数转换成字符串
        char arr[] = s.toCharArray();           //将字符串存入字符数组

        int numSquare = (int)Math.pow((double)num,2);
        String sSquare = Integer.toString(numSquare);
        char arrSquare[] = sSquare.toCharArray();   //将字符串的平方存入字符数组

        for (int i = 0,j = arrSquare.length - arr.length + i;i < arr.length;i ++,j ++ )
            if (arr[i] != arrSquare[j]) {
                //flag = false;
                //System.out.print("您输入的数不是自守数。");
                //break;
                return false;
            }
        //if (flag)
            //System.out.print("您输入的数是自守数。");
        return true;
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("请输入一个正整数：");
        int max = input.nextInt();      //输出此数之前自守数的个数
        int count = 0;

        for (int i = 0 ;i < max ; i ++)
            if (isSelfGuardingNumber(i)) {
                count ++;
                System.out.print(i + "   ");
            }

        System.out.print("\n" + max + " 以内 自守数的个数是：" + count + " 个。");
    }
}
*/



找出1000以内的所有完数
		
		/*
整数 = 0;
for（int i = 1;i <= 1000;i++）{
			
for（int j = 1;j <= i / 2;j++）{
				
if（i % j == 0）{
因子 += j;
				}
				
			}
if（i == factor）{
System.out.println（i）;
			}
			
重置因子
因子 = 0;
		}
		*/

		
打印图像
		
内层循环控制行数，外层循环控制列数
		/*
for（int i = 1;i <= 6;i++）{
for（int j = 1;j <= 7 - i;j++）{
				
System.out.print（“*”）;此处不换行
				
			}
System.out.println（）;
		}
		*/
		
		
数组初始化
		
		/*
字符串[] 名称 = 新字符串[2];
		
names[0] = “张三”;
names[1] = “李四”;
		
遍历数组元素
for（int i = 0;i < names.length;i++）{
System.out.println（“names[”+i+“] = ” + names[i]）;
		}

获取数组长度
System.out.println（names.length）;
		*/
		
		
		
练习1
		
		/*
int[] arr = new int[] {8， 2， 1， 0， 3};
int[] 索引 = new int[]{2， 0， 3， 2， 4， 0， 1， 3， 2， 3， 3};
字符串 tel = “”;
for（int i = 0; i < index.length;i++）{
tel += arr[index[i]];
		}
System.out.println（“联系方式： ” + tel）;
		*/
		
		
练习2
		
		/*
int i;
int a[];声明一个整数数组a
a = 新整数 [5];
for（i = 0;i < 5;i++）{
System.out.print（“ a [” +i+ “] = ” +a[i] + “，\t”）;
		}
System.out.println（“\n数组长度是： ” + a.length）;
		*/
		
		/*
1，使用扫描器，读取学生个数
crtl+shift+o
扫描仪扫描仪 = 新扫描仪（System.in）;
System.out.println（“请输入学生人数： ”）;
int number = scanner.nextInt（）;
		
2,创建数组，存储学生成绩
int[] 分数 = new int[number];
		
3,给数组中的元素赋值
System.out.println（“请输入” + number + “个学生成绩： ”）;
for（int i = 0;i < scores.length;i++）{
scores[i] = scanner.nextInt（）;
		}
		
4,获取数组中的元素的最大值、最高分
int maxScores = 0;
for（int i = 0;i < scores.length;i++）{
if（maxScores < scores[i]）{
最大分数 = 分数[i];
			}
		}
		
5,根据每个学生成绩与最高分的差值，得到等级
字符级别;
for（int i = 0;i < scores.length;i++）{
if（maxScores - scores[i] <= 10）{
级别 = 'A';
}else if（maxScores - scores[i] <= 20）{
级别 = 'B';
}else if（maxScores - scores[i] <= 30）{
级别 = “C”;
}else{
级别 = 'D';
			}
			
System.out.println（“student” + i + “score is” + scores[i] + “，grade is ” + level）;
		}		
		*/
		
获取数组中的元素
		
		/*
整型和 = 0;
int[][] arr = new int[][]{{3，5，8}，{12，9}，{7，0，6，4}};
for（int i = 0;i < arr.length;i++）{
for（int j = 0;j < arr[i].length;j++）{
arr[i].length是
和 += arr[i][j];
			}
		}
		
System.out.println（sum）;
		*/
		
		
//打印杨辉三角
		
		/*
//1,初始化常量
		
int[][] yanghui = new int[10][];
		
2,给常量赋值
		
for（int i = 0;i < yanghui.length;i++）{
杨辉[i] = 新 int[i + 1];每一行的首元素大小相等都是1
杨辉[i][0] = 1;
首元素赋值
杨辉[i][i] = 1;
末元素赋值
if（i > 1）{
for（int j = 1;j < yanghui[i].length - 1;j++）{
yanghui[i].length-1 倒数第二个元素
杨会[i][j] = 杨会[i - 1][j - 1] + 阳会[i - 1][j];
				}
			}
		}
		
		
遍历杨辉三角
		
for（int i = 0;i < yanghui.length;i++）{
for（int j = 0;j < yanghui[i].length;j++）{
System.out.print（yanghui[i][j] + “ ”）;
			}
System.out.println（）;
		}
		*/
		
		
求一个10~100中10个随机数中的最大值、最小值、总和和平均数
		
初始化数组 元素
int[] array = new int[10];
		
赋随机值
for（int i = 0;i < array.length;i++）{
array[i] = （int）（Math.random（） * （99 - 10 + 1） + 10）;生成10~100随机数
		}
		
for（int i = 0;i < array.length;i++）{
System.out.print（array[i] + “ ”）;
		}
System.out.println（）;
		
打印最大值
int maxValue = array[0];
for（int i = 0;i < array.length;i++）{
if（maxValue < array[i]）{
maxValue = array[i];
			}
		}
System.out.println（“最大值是：” + maxValue）;
		
		
打印最小值
int minValue = array[0];
for（int i = 0;i < array.length;i++）{
if（minValue > array[i]）{
minValue = array[i];
			}
		}
System.out.println（“最小值是：” + minValue）;
			
			
打印总和
int sumValue = array[0];
for（int i = 0;i < array.length;i++）{
sumValue += array[i];
		}
System.out.println（“总和是：” + sumValue）;
		
		
		
打印平均值
int meanValue = array[0];
for（int i = 0;i < array.length;i++）{
meanValue = sumValue / array.length;
		}
System.out.println（“平均值是：” + meanValue）;


