package com.atguigu.java;
/*
 *  面向对象的特征之二 ：继承性
 *   一、继承性的好处
 *   ①减少了代码的冗余，提高了代码的复用性
 *   ②便于功能的扩展、
 *   ③为之后多态性的使用，提供了前提
 *   
 *   二、继承性的格式： class A extends B{}
 *   A:子类、派生类、subclass
 *   B:父类、超类、基类、superclass
 *   A继承B中的属性、方法、结构
 *   注：父类中Private的属性和方法，子类继承父类以后，仍然认为获取了父类中私有的结构。
 *   只是因为封装性的影响，使得子类不能直接调用父类的结构而已
 *   
 *   三、继承性的规定
 *   1. 一个类可以被多个子类继承
 *   2. Java中类的单继承性：一个类只能有一个父类
 *   3. 子父类是相对的概念
 *   4. 子类直接继承的父类，称为：直接父类，间接继承的父类称为：间接父类
 *   5. 子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法
 * 
 *   四、1.如果未显式的声明一个类的父类的话，则此类继承于java.lang.object类
 *      2.所有的java类（除java.lang.object类之外）都直接或间接的继承于Java.lang.object类
 *      3.意味着，所有的Java类具有java.lang.object类声明的功能
 */

public class ExtendsTest {

	public static void main(String[] args) {
		Person p1 = new Person();
		p1.eat();
		p1.seelp();
		
		Student s1 = new Student();
		s1.eat();
		s1.seelp();
		s1.major();
		s1.name = "Tom";
		
		s1.breath();
		
		Cteature c = new Cteature();
		System.out.println(c.toString());

	}

}




package com.atguigu.java;

public class Student extends Person{
	
//	String name;
//	int age;
	String major;
	
	public Student(){
		
	}
	
	public void Student(String name,int age,String major){
		this.name = name;
		this.age = age;
		this.major = major;
	}
	
//	public void eat(){
//		System.out.println("吃饭");
//	}
//	
//	public void seelp(){
//		System.out.println("睡觉");
//	}

	public void major(){
		System.out.println("学习");
	}
}




package com.atguigu.java;

public class Person extends Cteature{
	
	//属性
	String  name;
	int age;
	
	//构造器
	public Person(){
		
	}
	
	//方法
	public void Person(String name,int age){
		this.name = name;
		this.age = age;
	}
	
	public void eat(){
		System.out.println("吃饭");
	}
	
	public void seelp(){
		System.out.println("睡觉");
	}

}




package com.atguigu.java;

public class Cteature {

	public void breath(){
		System.out.println("呼吸");
	}
}
