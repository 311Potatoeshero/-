package com.atguigu.java;
/**
 * 例子：创建三个窗口卖票，总票数为100张，用Thread方法解决线程安全问题
 *
 * 线程安全问题待解决
 */

class Window extends Thread{

    private static int ticket = 100;//设置为静态变量，三个窗口共享

    private static Object object = new Object(); //设置为静态变量，三个窗口共享

    @Override
    public void run() {
        while(true){
            synchronized(object){

                if(ticket > 0 ){

                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    System.out.println(getName() + ":卖票，票号为：" + ticket);

                    ticket--;
                }else
                {
                    break;
                }
            }
        }


    }
}

public class WindowTest2 {

    public static void main(String[] args) {
        Window w1 = new Window();
        Window w2 = new Window();
        Window w3 = new Window();

        w1.setName("窗口1");
        w2.setName("窗口2");
        w3.setName("窗口3");

        w1.start();
        w2.start();
        w3.start();
    }

}


package com.atguigu.java;

/**
 *  例子：创建三个窗口卖票，总票数为100张,通过Runnable接口的方法实现
 *
 *  解决线程安全问题:
 *  方式一：
 *      同步代码块：
 *      synhronized(同步监视器){
 *          //需要被同步的代码
 *      }
 *      说明：1.操作共享数据的代码，即为需要被同步的代码
 *           2.共享数据，多个线程共同操作的变量。比如：ticket
 *           3.同步监视器，俗称：锁，任何一个类的对象，都可以充当锁
 *              要求：多个线程必须公用一把锁
 *
 *  方式二：同步方法
 *
 *      同步的方式，解决了线程的安全问题 --好处
 *      操作同步代码时，只能有一个线程参与，其他线程等待
 *
 */
class Window1 implements Runnable{

    private int ticket = 100;

    Object obj = new Object();

    @Override

    public void run(){
//      synchronized(this){
        while(true){
//              synchronized(obj){

              if(ticket > 0){

              try {
              Thread.sleep(100);
              } catch (InterruptedException e) {
              e.printStackTrace();
              }

            System.out.println(Thread.currentThread().getName() + ":" + ticket);

            ticket--;
          }else
          {
            break;
          }
//          }
        }
    }
}
public class WindowTest1 {
    public static void main(String[] args) {
        Window1  w = new Window1();

        Thread t1 = new Thread(w);
        Thread t2 = new Thread(w);
        Thread t3 = new Thread(w);

        t1.setName("线程一：");
        t2.setName("线程二：");
        t3.setName("线程三：");

        t1.start();
        t2.start();
        t3.start();

    }
}


package com.atguigu.java;

/**
 *  例子：创建三个窗口卖票，总票数为100张,通过Runnable接口的方法实现
 *
 *  解决线程安全问题:
 *  方式一：
 *      同步代码块：
 *      synhronized(同步监视器){
 *          //需要被同步的代码
 *      }
 *      说明：1.操作共享数据的代码，即为需要被同步的代码
 *           2.共享数据，多个线程共同操作的变量。比如：ticket
 *           3.同步监视器，俗称：锁，任何一个类的对象，都可以充当锁
 *              要求：多个线程必须公用一把锁
 *
 *  方式二：同步方法
 *
 *      同步的方式，解决了线程的安全问题 --好处
 *      操作同步代码时，只能有一个线程参与，其他线程等待
 *
 */
class Window1 implements Runnable{

    private int ticket = 100;

    Object obj = new Object();

    @Override

    public void run(){
//      synchronized(this){
        while(true){
//              synchronized(obj){

              if(ticket > 0){

              try {
              Thread.sleep(100);
              } catch (InterruptedException e) {
              e.printStackTrace();
              }

            System.out.println(Thread.currentThread().getName() + ":" + ticket);

            ticket--;
          }else
          {
            break;
          }
//          }
        }
    }
}
public class WindowTest1 {
    public static void main(String[] args) {
        Window1  w = new Window1();

        Thread t1 = new Thread(w);
        Thread t2 = new Thread(w);
        Thread t3 = new Thread(w);

        t1.setName("线程一：");
        t2.setName("线程二：");
        t3.setName("线程三：");

        t1.start();
        t2.start();
        t3.start();

    }
}
